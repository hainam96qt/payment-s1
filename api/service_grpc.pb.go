// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/v1.AuthenticationService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthenticationService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthenticationService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// OrderProductServiceClient is the client API for OrderProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderProductServiceClient interface {
	CreateWager(ctx context.Context, in *CreateWagerRequest, opts ...grpc.CallOption) (*CreateWagerResponse, error)
	BuyWager(ctx context.Context, in *BuyWagerRequest, opts ...grpc.CallOption) (*BuyWagerResponse, error)
	GetWager(ctx context.Context, in *GetWagerRequest, opts ...grpc.CallOption) (*GetWagerResponse, error)
}

type orderProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderProductServiceClient(cc grpc.ClientConnInterface) OrderProductServiceClient {
	return &orderProductServiceClient{cc}
}

func (c *orderProductServiceClient) CreateWager(ctx context.Context, in *CreateWagerRequest, opts ...grpc.CallOption) (*CreateWagerResponse, error) {
	out := new(CreateWagerResponse)
	err := c.cc.Invoke(ctx, "/v1.OrderProductService/CreateWager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductServiceClient) BuyWager(ctx context.Context, in *BuyWagerRequest, opts ...grpc.CallOption) (*BuyWagerResponse, error) {
	out := new(BuyWagerResponse)
	err := c.cc.Invoke(ctx, "/v1.OrderProductService/BuyWager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductServiceClient) GetWager(ctx context.Context, in *GetWagerRequest, opts ...grpc.CallOption) (*GetWagerResponse, error) {
	out := new(GetWagerResponse)
	err := c.cc.Invoke(ctx, "/v1.OrderProductService/GetWager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderProductServiceServer is the server API for OrderProductService service.
// All implementations must embed UnimplementedOrderProductServiceServer
// for forward compatibility
type OrderProductServiceServer interface {
	CreateWager(context.Context, *CreateWagerRequest) (*CreateWagerResponse, error)
	BuyWager(context.Context, *BuyWagerRequest) (*BuyWagerResponse, error)
	GetWager(context.Context, *GetWagerRequest) (*GetWagerResponse, error)
	mustEmbedUnimplementedOrderProductServiceServer()
}

// UnimplementedOrderProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderProductServiceServer struct {
}

func (UnimplementedOrderProductServiceServer) CreateWager(context.Context, *CreateWagerRequest) (*CreateWagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWager not implemented")
}
func (UnimplementedOrderProductServiceServer) BuyWager(context.Context, *BuyWagerRequest) (*BuyWagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyWager not implemented")
}
func (UnimplementedOrderProductServiceServer) GetWager(context.Context, *GetWagerRequest) (*GetWagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWager not implemented")
}
func (UnimplementedOrderProductServiceServer) mustEmbedUnimplementedOrderProductServiceServer() {}

// UnsafeOrderProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderProductServiceServer will
// result in compilation errors.
type UnsafeOrderProductServiceServer interface {
	mustEmbedUnimplementedOrderProductServiceServer()
}

func RegisterOrderProductServiceServer(s grpc.ServiceRegistrar, srv OrderProductServiceServer) {
	s.RegisterService(&OrderProductService_ServiceDesc, srv)
}

func _OrderProductService_CreateWager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).CreateWager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrderProductService/CreateWager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).CreateWager(ctx, req.(*CreateWagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProductService_BuyWager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyWagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).BuyWager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrderProductService/BuyWager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).BuyWager(ctx, req.(*BuyWagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProductService_GetWager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductServiceServer).GetWager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrderProductService/GetWager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductServiceServer).GetWager(ctx, req.(*GetWagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderProductService_ServiceDesc is the grpc.ServiceDesc for OrderProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OrderProductService",
	HandlerType: (*OrderProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWager",
			Handler:    _OrderProductService_CreateWager_Handler,
		},
		{
			MethodName: "BuyWager",
			Handler:    _OrderProductService_BuyWager_Handler,
		},
		{
			MethodName: "GetWager",
			Handler:    _OrderProductService_GetWager_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
